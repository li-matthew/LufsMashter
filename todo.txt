Lookahead
Latency
Labels

lookahead

harmonic control within limiter via gain reduction curve

tanh soft clipper
waveshaper
dynamic saturation bit crush down sample based on gain reduction

float truePeakLimiterWithEffects(float sample, float truePeak, float threshold,
                                  float saturationDrive, int bitDepth,
                                  float transientAttack, float releaseCoef) {
    // Apply dynamic soft clipping (saturation)
    if (truePeak > threshold) {
        sample = softClip(sample, saturationDrive);  // Apply saturation

        // Apply bitcrushing (glitch effects)
        sample = bitcrusher(sample, bitDepth);

        // Apply transient shaping for crunchiness
        sample = transientShaper(sample, transientAttack);
        
        // Apply frequency modulation (metallic tones)
        sample = ringModulation(sample, 500.0f);  // Ring modulation frequency
    }

    // Apply release behavior (adaptive or harmonic)
    sample = adaptiveRelease(sample, releaseCoef);

    // Final limiting (after effects)
    if (truePeak > threshold) {
        float reductionFactor = threshold / truePeak;
        sample *= reductionFactor;
    }

    return sample;
}


